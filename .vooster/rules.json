{
  "rules": [
    {
      "type": "prd",
      "content": "# CivicAid MVP PRD – 린 파일럿 버전 (군포시 ➜ 서대문구)\n\n## 1. 한줄 요약\nAI 분류·자동 알림으로 전화‧문자 업무 부담을 확 줄여주는 멀티채널 민원 처리 SaaS.\n\n## 2. 목표 및 성공 지표\n1. 전화‧문자 안내량 50% 이상 감소 (파일럿 기관 4주 측정)\n2. 최초 진행 알림 발송율 90% 이상, 클릭율 60% 이상\n3. 평균 답변 완료 시간 30% 단축\n\n## 3. 핵심 사용자\n민원 담당 비서관·직원(지역사무소 실무자)\n\n## 4. 핵심 페인포인트\n시민에게 진행 상황을 전화·문자로 수동 안내하느라 업무가 과부하된다.\n\n## 5. 기능 범위 (MVP 6-8주)\n| 구분 | 포함 여부 | 설명 |\n|------|-----------|------|\n|AI 카테고리 분류·자동 배정|✓|LLM 기반 텍스트 분석 → 담당자 매핑|\n|AI 답변 초안 생성|✓|카테고리·감정 톤 기반 자동 문안, 1-클릭 발송|\n|실시간 알림(카카오, SMS, 이메일)|✓|접수·상태변경·답변완료 이벤트 트리거|\n|시민용 진행 타임라인 페이지|✓|토큰 URL, 모바일 최적화, 다크모드|\n|감정 분석 우선태그|✓|High-Priority 뱃지, 필터 지원|\n|실시간 통계 대시보드|✓|오늘/주간 접수·완료·지연 KPI, 임박 SLA 리스트|\n|고급 검색·필터|✓|카테고리·우선순위·담당자·기간|\n|시민 만족도 조사|✓|답변 24h 후 자동 발송, 5점 척도|\n|다단계 승인, 공문 PDF|✗ 2차|MVP 제외|\n|온프레미스/키오스크|✗ 3차|로드맵 미표기|\n\n## 6. 주요 워크플로우 (메인 시나리오)\n1. 민원 접수 → 시스템이 즉시 AI 분류 & 담당자 배정 (≤5초)\n2. 담당자가 인박스에서 티켓 클릭 → 우측 패널에 상세·AI 초안·\"발송\" 버튼 표시\n3. 담당자가 초안 검토·수정 후 \"발송\" 클릭 (1-클릭)\n4. 시스템: 답변 저장 → 상태 \"답변 완료\" → 시민에게 알림(채널별) → 타임라인 갱신\n\n## 7. 알림 정책\n- 채널 우선순위: 카카오 알림톡 > SMS(백업) > 이메일(전문)\n- 이벤트: 접수확인, 담당자지정, 답변완료, 만족도요청\n- SLA 임박(남은 24h) 시 담당자·상급자 이메일+웹푸시\n\n## 8. 기술 스택 (BASE)\nNext.js 15 · Supabase · Clerk · LemonSqueezy · pnpm monorepo · shadcn · lucide-react · TypeScript · @tanstack/react-query\n\n## 9. 개발 일정\nWeek 1  : 프로젝트 셋업, DB 스키마, Clerk Auth\nWeek 2  : AI 분류 서비스 연동, 인박스 UI\nWeek 3  : AI 답변 초안 모듈, 우측 패널 UX\nWeek 4  : 알림 서비스(Kakao, SMS, Email) 연동\nWeek 5  : 시민 타임라인, 대시보드 v1\nWeek 6  : SLA/감정 태깅, 만족도 조사, 버그픽스\nWeek 7-8: 군포시 파일럿 운영 & 피드백, 서대문구 준비\n\n## 10. 리스크 & 대응\n- Kakao 비즈메시지 심사 지연 → SMS 백업 채널 즉시 가동\n- AI 오분류 → 수동 수정 로그로 주간 재학습 파이프라인 마련\n- 공공망 보안 점검 → Supabase IP allowlist, ISO 27001 보고서 제공\n\n## 11. 향후 확장(비-MVP)\n• 다단계 승인 & 공문 PDF\n• 챗봇 사전응대, 온프레미스 옵션, 오프라인 키오스크\n• 빅데이터 인사이트 리포트",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "architecture",
      "content": "Of course. As a senior technical architect, my goal is to distill the technical requirements into a clear, actionable blueprint that eliminates ambiguity and unnecessary complexity.\n\nHere is the revised, lean Technical Specification, designed for rapid MVP development.\n\n---\n\n### **Lean Technical Specification: CivicAid MVP**\n\nThis document outlines the core technical architecture and implementation strategy for the CivicAid MVP, directly addressing the PRD requirements. The primary principle is to leverage the chosen stack's integrated features to maximize development speed and minimize dependencies.\n\n#### **1. Core Architecture & Stack**\n\nThe system is a **Next.js monolithic application** using **Supabase** as the all-in-one backend (Database, Realtime, Storage, Edge Functions). Authentication is handled by **Clerk** for robust user and organization management.\n\n**Core Stack (Confirmed from PRD):**\n*   **Framework:** Next.js 15 (App Router)\n*   **Backend & DB:** Supabase (Postgres, Auth, Storage, Realtime, Edge Functions)\n*   **Authentication:** Clerk (Primary user management, orgs, SSO readiness)\n*   **UI:** shadcn/ui, lucide-react, @tanstack/react-query\n*   **Payments:** LemonSqueezy\n*   **Package Manager:** pnpm (monorepo)\n\n**Key Architectural Simplifications:**\n*   **NO `socket.io`:** We will use **Supabase Realtime Subscriptions** for all live UI updates (e.g., inbox, dashboard). This removes the need for a separate WebSocket server, reducing complexity and operational overhead.\n*   **NO `UploadThing`:** We will use **Supabase Storage** for handling file attachments, keeping all data within a single platform.\n\n#### **2. Key System Flows & Implementation**\n\nThis section defines the critical data flows.\n\n**A. Complaint Ingestion & AI Processing (≤ 5s)**\n1.  A new complaint is submitted via a Next.js API Route.\n2.  The API route performs initial validation and saves the raw complaint to the `tickets` table in Supabase with a `status` of `new`.\n3.  A **Supabase Database Webhook** or **Edge Function** is triggered by this `INSERT` event.\n4.  The function sends the complaint text to the AI service (e.g., OpenAI API).\n5.  The function receives the `category`, `sentiment`, and `suggested_assignee_id` from the AI.\n6.  It updates the ticket record in Supabase with the AI-generated data and changes the `status` to `classified`. The initial \"receipt confirmation\" notification is triggered.\n\n**B. Notification Dispatch**\n1.  Changes to a ticket's `status` (e.g., `classified`, `replied`) or other key events trigger a database function.\n2.  This function inserts a job into a `notification_queue` table.\n3.  A dedicated **Supabase Edge Function**, running on a schedule or triggered by the queue, processes jobs.\n4.  It implements the PRD's channel priority:\n    *   Attempt to send via Kakao Alimtalk API.\n    *   If it fails or the user has no Kakao handle, send via SMS.\n    *   Log the delivery status (`sent`, `failed`, `channel_used`) back to the database.\n\n**C. Agent Workflow (Inbox & Reply)**\n1.  The agent's inbox UI uses `@tanstack/react-query` to fetch initial data.\n2.  It then establishes a **Supabase Realtime Subscription** to the `tickets` table (filtered for the agent's view by RLS).\n3.  Any new or updated ticket is pushed directly to the client, updating the UI without polling.\n4.  When an agent sends a reply, the client performs an API call. The backend saves the reply, updates the ticket `status` to `replied`, which in turn triggers the \"Reply Sent\" notification flow (B).\n\n**D. Public Timeline View**\n1.  When a ticket is created, a secure, non-guessable `public_token` (UUID) is generated and stored with the ticket.\n2.  The URL sent to citizens will be `/timeline/{public_token}`.\n3.  A Next.js page (`/timeline/[token]/page.tsx`) will use the token to fetch the specific ticket's history via a server-side query. **Row Level Security** will ensure this token can only access its associated ticket data.\n\n#### **3. Data Model (Core Supabase Schema)**\n\nA simplified schema is sufficient for the MVP.\n\n*   `tickets`\n    *   `id` (uuid, pk)\n    *   `created_at` (timestamp)\n    *   `organization_id` (fk)\n    *   `citizen_name` (text)\n    *   `citizen_contact` (jsonb, e.g., `{ \"phone\": \"...\", \"email\": \"...\" }`)\n    *   `content` (text)\n    *   `status` (enum: `new`, `classified`, `in_progress`, `replied`, `closed`)\n    *   `category` (text, nullable)\n    *   `priority` (enum: `normal`, `high`) - Derived from sentiment analysis.\n    *   `assigned_to_id` (fk, users, nullable)\n    *   `public_token` (uuid, unique)\n    *   `sla_due_at` (timestamp)\n\n*   `ticket_updates`\n    *   `id` (uuid, pk)\n    *   `ticket_id` (fk)\n    *   `user_id` (fk, nullable) - Null if system-generated update.\n    *   `update_type` (enum: `status_change`, `comment`, `reply_sent`)\n    *   `content` (jsonb)\n\n*   `satisfaction_surveys`\n    *   `id` (uuid, pk)\n    *   `ticket_id` (fk)\n    *   `rating` (int, 1-5)\n    *   `submitted_at` (timestamp)\n\n*   `users` and `organizations` will be primarily managed by **Clerk**, with corresponding public data synced to Supabase tables for relational integrity.\n\n#### **4. Key Technical Decisions & Risk Mitigation**\n\n*   **Authentication & Authorization:**\n    *   **Decision:** Clerk is the source of truth for users and organizations. A Clerk JWT will be passed to Supabase to authenticate API requests and enforce **Row Level Security (RLS)**.\n    *   **Implementation:** RLS policies are mandatory. The default policy is `DENY`. Policies will ensure a user can only see tickets belonging to their `organization_id`.\n\n*   **AI Service Integration:**\n    *   **Decision:** Abstract all AI calls into a single service module (`/packages/ai`). Use environment variables to define the provider and model.\n    *   **Risk:** AI misclassification or latency.\n    *   **Mitigation:**\n        1.  The UI **must** allow agents to manually override the category and priority.\n        2.  Log all manual corrections. This data will be used for future prompt-tuning or fine-tuning, but the re-training pipeline itself is **out of scope for the MVP**.\n        3.  Implement a simple 10-second timeout on AI API calls; if it fails, the ticket is marked `needs_manual_review`.\n\n*   **Security:**\n    *   **Decision:** The primary security layer is Supabase RLS. All API endpoints must perform server-side validation.\n    *   **Mitigation (Public Sector):** For the pilot, configure Supabase's network restrictions to allowlist IPs from the partner municipality's office network.\n\n*   **Dependencies:**\n    *   **Risk:** Kakao Alimtalk approval delay.\n    *   **Mitigation:** The notification module will be built with SMS as the primary, fully functional channel from day one. The Kakao provider can be enabled via a feature flag once approved. This ensures no development blockage.",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "guideline",
      "content": "\n  \n  ## Library\n  - **Packages**: `@myapp/api`, `@myapp/ui`, `@myapp/prisma`, `@myapp/utils`\n  - **Boundaries**: `apps/* -> packages/*` only; no cross-app imports; no cycles\n  - **Imports**: Package entrypoints only (no deep internal paths)\n  - **Env**: Server-only secrets on server; never expose in client\n  \n  ## Directory Structure\n  - **Monorepo**: `apps/app`, `apps/www`, `packages/*`, `tooling/*`\n  - **App (dashboard)**: `apps/app/src/{app,components,features,hooks,i18n,utils}`\n  - **Landing**: `apps/www/app`, `apps/www/src/{components,i18n}`\n  - **API**: `packages/api/src/{trpc.ts,root.ts,routers/*}`\n  - **DB**: `packages/prisma/prisma/*`, `packages/prisma/generated/prisma`\n  - **UI**: `packages/ui/src/{components,lib/utils.ts,index.ts}`\n  \n  ## Code Guidelines\n  - **Feature-first**: `apps/app/src/features/[feature]/*` (UI + logic)\n  - **Validation**: `zod` at API boundaries; reuse on client\n  - **tRPC**: Router per domain; export via `root.ts`; typed client in app\n  - **i18n**: `apps/app/messages`, `apps/www/src/i18n/locales`\n  - **Side-effects**: Server-only in API/tRPC; wrap external calls\n  \n  ## Code-Style Guidelines\n  - **TypeScript**: strict; prefer `type`; use `unknown` over `any`\n  - **Naming**: PascalCase components; camelCase vars; kebab-case dirs\n  - **Files**: One component per file; colocate tests/stories if any\n  - **Imports**: node/3p -> packages -> relative; no deep UI imports\n  - **React**: Server Components by default; `use client` only when needed; avoid default exports\n  - **Styling**: Tailwind; compose with `cn` from `@myapp/ui/lib/utils`\n  - **Format/Lint**: Prettier + ESLint from `tooling/eslint-config`\n  \n  ## Error Handling\n  - **Validate early**: `zod` parse → typed inputs\n  - **tRPC**: `TRPCError({ code, message, cause })`; map domain errors\n  - **HTTP**: `NextResponse.json({ error: { code, message } }, { status })`\n  - **UI feedback**: toasts/dialogs from `@myapp/ui`\n  - **Logging**: include context; never leak secrets\n  - **Never**: swallow errors or throw plain strings\n  \n  ## Prisma\n  - **Single source**: `packages/prisma/prisma/schema.prisma`\n  - **Flow**: edit → `pnpm db:migrate:create` → `pnpm db:generate`\n  - **Do NOT**: run `pnpm db:migrate:deploy` locally\n  - **Access**: use generated client (`@myapp/prisma`); no raw SQL\n  - **Transactions**: `prisma.$transaction`; handle unique/constraint errors\n  - **Types**: share DTOs via `zod` and `@myapp/utils`\n  \n  ## Shadcn (UI)\n  - **Source**: `packages/ui` only; import via package entrypoints\n  - **Add**: in `packages/ui` → `pnpm dlx shadcn@canary add <component>`\n  - **Export**: re-export from `packages/ui/src/index.ts`\n  - **Utilities**: `cn` from `@myapp/ui/lib/utils`\n  - **Styling**: follow tokens; avoid inline styles; no deep imports\n    ",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "design-guide",
      "content": "# CivicAid Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\nCivicAid는 공공 업무의 효율성과 신뢰성을 강조하는 전문적이면서도 접근하기 쉬운 서비스입니다. 민원 담당 직원들이 복잡한 업무를 간단하고 직관적으로 처리할 수 있도록 돕는 것이 핵심 목표입니다. \n\n전체적인 디자인 무드는 **차분하고 신뢰할 수 있는 전문성**을 바탕으로 하되, 사용자가 부담스럽지 않게 느낄 수 있도록 **친근하고 깔끔한 현대적 감성**을 더했습니다. 복잡한 정보를 체계적으로 정리하여 한눈에 파악할 수 있도록 하며, 업무 효율성을 극대화하는 것에 중점을 둡니다.\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Linear.app\n- **Description**: 이슈 트래킹 및 프로젝트 관리 도구로, 개발팀을 위한 직관적이고 빠른 워크플로우를 제공\n- **Design Mood**: 미니멀하고 전문적인 느낌의 다크 네이비 베이스에 파스텔 액센트 컬러를 활용한 모던한 디자인\n- **Primary Color**: #2C4A7A (다크 네이비)\n- **Secondary Color**: #4E7DD4 (소프트 블루)\n\nLinear의 깔끔한 레이아웃 구조, 타이포그래피 위계, 그리고 정보 밀도 관리 방식을 CivicAid에 적용하여 공공 업무 환경에 적합한 전문적이면서도 사용하기 쉬운 인터페이스를 구현합니다.\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n- **Primary Color**: #2C4A7A (다크 네이비)\n- **Secondary Color**: #4E7DD4 (소프트 블루)\n- **Accent Color**: #1CBCB2 (민트 그린)\n- **Neutral Colors**: \n  - Background: #F5F7FA\n  - Surface: #FFFFFF\n  - Border: #E3E7ED\n  - Text Secondary: #A3ADBA\n- **Danger Color**: #E05D5D (소프트 레드)\n- **Mood**: 쿨톤 계열, 중간-낮은 채도로 안정감과 신뢰성 전달\n\n**색상 사용 우선순위**:\n1. **Primary (#2C4A7A)**: 주요 CTA 버튼, 네비게이션 활성 상태, 브랜드 요소\n2. **Secondary (#4E7DD4)**: 보조 버튼, 링크, 정보성 배지\n3. **Accent (#1CBCB2)**: 성공 상태, 완료 표시, 긍정적 피드백\n4. **Neutral**: 배경, 텍스트, 구분선 등 기본 UI 요소\n5. **Danger (#E05D5D)**: 경고, 오류, 긴급 상태 표시\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n- **Primary Font**: Pretendard (한국어 최적화 폰트)\n- **Heading 1**: Pretendard SemiBold, 32px, Line Height 1.25\n- **Heading 2**: Pretendard SemiBold, 24px, Line Height 1.3\n- **Heading 3**: Pretendard SemiBold, 20px, Line Height 1.4\n- **Body Large**: Pretendard Regular, 16px, Line Height 1.5\n- **Body**: Pretendard Regular, 14px, Line Height 1.5\n- **Caption**: Pretendard Regular, 12px, Line Height 1.4\n- **Button Text**: Pretendard Medium, 14px\n\n**타이포그래피 원칙**:\n- 명확한 정보 위계 구조 유지\n- 충분한 행간으로 가독성 확보\n- 중요한 정보는 SemiBold로 강조\n- 긴 텍스트 블록은 적절한 여백으로 구분\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n**그리드 시스템**:\n- 12컬럼 그리드 기반\n- 좌측 고정 사이드바 (280px)\n- 메인 콘텐츠 영역 가변 너비\n- 우측 슬라이드 패널 (400px)\n\n**반응형 브레이크포인트**:\n- Desktop: 1200px+\n- Tablet: 768px - 1199px (사이드바 축소)\n- Mobile: 767px 이하 (드로어 메뉴 전환)\n\n**레이아웃 원칙**:\n- 좌측에서 우측으로의 자연스러운 시선 흐름\n- 중요한 액션은 시각적 중심부에 배치\n- 충분한 화이트스페이스로 정보 밀도 조절\n- 스크롤 최소화를 위한 효율적인 공간 활용\n\n## 6. Visual Style (비주얼 스타일)\n\n**아이콘 스타일**:\n- Lucide React 아이콘 세트 사용\n- 24px 기본 크기, 16px 소형 버전\n- 2px 스트로크 두께로 일관성 유지\n- 컨텍스트에 따른 색상 적용\n\n**이미지 & 일러스트레이션**:\n- 실제 사용 상황을 반영한 현실적 이미지\n- 다양성과 포용성을 고려한 인물 표현\n- 차분한 톤의 컬러 팔레트 적용\n\n**그래픽 요소**:\n- 6px 모서리 반경으로 부드러운 느낌\n- 미묘한 그림자 효과 (0 2px 4px rgba(0,0,0,0.1))\n- 그라데이션은 최소한으로 사용, 필요시 동일 색상의 명도 차이 활용\n\n## 7. UX Guide (UX 가이드)\n\n**타겟 사용자 특성**: 초보자 중심의 민원 담당 공무원\n- 기술적 배경이 제한적일 수 있음\n- 업무 효율성을 최우선으로 고려\n- 실수 방지와 명확한 피드백 필요\n\n**UX 전략 및 원칙**:\n\n1. **직관적 인터페이스**: \n   - 친근하고 설명적인 레이블 사용\n   - 아이콘과 텍스트를 함께 제공하여 의미 명확화\n   - 일관된 네비게이션 패턴 유지\n\n2. **학습 지원**:\n   - 첫 로그인 시 온보딩 위저드 제공\n   - 상황별 도움말 툴팁\n   - 주요 기능에 대한 컨텍스추얼 가이드\n\n3. **오류 방지**:\n   - 중요한 액션에 대한 확인 단계\n   - 10초간 실행 취소 기능 제공\n   - 입력 검증과 실시간 피드백\n\n4. **진행 상황 표시**:\n   - 로딩 상태에 대한 명확한 시각적 피드백\n   - 단계별 진행 표시기\n   - 완료 상태에 대한 성취감 제공\n\n5. **점진적 공개**:\n   - 복잡한 기능은 단계별로 노출\n   - 고급 옵션은 접을 수 있는 섹션으로 구성\n   - 사용자 숙련도에 따른 인터페이스 커스터마이징\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n**버튼 (Buttons)**:\n- Primary: #2C4A7A 배경, 흰색 텍스트, 6px 반경\n- Secondary: 투명 배경, #2C4A7A 테두리와 텍스트\n- Ghost: 투명 배경, 호버 시 배경색 변화\n- 높이: 40px (Large), 32px (Medium), 24px (Small)\n- 패딩: 좌우 16px, 상하 8px\n\n**입력 필드 (Input Fields)**:\n- 높이: 40px\n- 테두리: 1px solid #E3E7ED\n- 포커스: #4E7DD4 테두리, 0 0 0 2px rgba(78,125,212,0.1) 그림자\n- 플레이스홀더: #A3ADBA 색상\n- 라벨: 상단 8px 여백, Pretendard Medium 12px\n\n**카드 (Cards)**:\n- 배경: #FFFFFF\n- 테두리: 1px solid #E3E7ED\n- 그림자: 0 2px 4px rgba(0,0,0,0.05)\n- 패딩: 24px\n- 반경: 8px\n\n**네비게이션 바**:\n- 좌측 고정 사이드바 280px 너비\n- 배경: #FFFFFF\n- 활성 항목: #2C4A7A 배경, 흰색 텍스트\n- 호버: #F5F7FA 배경\n- 아이콘과 텍스트 조합, 16px 간격\n\n**배지 (Badges)**:\n- 높이: 24px\n- 패딩: 좌우 8px\n- 반경: 12px (완전한 둥근 모서리)\n- 우선순위: 빨간색(긴급), 주황색(높음), 파란색(보통), 회색(낮음)\n- 폰트: Pretendard Medium 11px\n\n**모달 (Modals)**:\n- 배경 오버레이: rgba(0,0,0,0.5)\n- 콘텐츠 배경: #FFFFFF\n- 최대 너비: 600px\n- 반경: 12px\n- 패딩: 32px\n- 상단 우측 닫기 버튼 배치\n\n**알림 (Notifications)**:\n- 성공: #1CBCB2 배경, 어두운 텍스트\n- 경고: #FFA726 배경, 어두운 텍스트\n- 오류: #E05D5D 배경, 흰색 텍스트\n- 정보: #4E7DD4 배경, 흰색 텍스트\n- 자동 해제: 4초 후 (오류는 수동 해제)",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "ia",
      "content": "# CivicAid 정보 구조 설계서 (Information Architecture)\n\n## 1. 사이트맵 (사이트맵)\n\n```\nCivicAid 플랫폼\n├── 인증 (Authentication)\n│   ├── 로그인 (/auth/login)\n│   ├── 회원가입 (/auth/signup)\n│   └── 비밀번호 재설정 (/auth/reset-password)\n├── 대시보드 (/dashboard)\n│   ├── 개요 KPI (/dashboard/overview)\n│   ├── 만족도 통계 (/dashboard/satisfaction)\n│   └── 실시간 알림 로그 (/dashboard/notifications)\n├── 민원함 (/inbox)\n│   ├── 전체 티켓 (/inbox/all)\n│   ├── 높은 우선순위 (/inbox/high-priority)\n│   ├── SLA 임박 (/inbox/sla-approaching)\n│   ├── 내 담당 (/inbox/assigned-to-me)\n│   └── 티켓 상세 (/inbox/ticket/:id)\n├── 시민 진행 상황 (Public)\n│   └── 타임라인 페이지 (/timeline/:token)\n├── 지식 베이스 (/knowledge-base)\n│   ├── 카테고리별 가이드 (/knowledge-base/categories)\n│   ├── 자주 묻는 질문 (/knowledge-base/faq)\n│   └── 답변 템플릿 (/knowledge-base/templates)\n├── 설정 (/settings)\n│   ├── 조직 관리 (/settings/organization)\n│   ├── 사용자 및 역할 (/settings/users)\n│   ├── 알림 템플릿 (/settings/notification-templates)\n│   ├── SLA 규칙 (/settings/sla-rules)\n│   └── 개인 설정 (/settings/profile)\n└── 도움말 (/help)\n    ├── 사용자 가이드 (/help/user-guide)\n    └── 온보딩 위저드 (/help/onboarding)\n```\n\n## 2. 사용자 흐름 (사용자 흐름)\n\n### **핵심 작업 1: 민원 처리 워크플로우**\n1. 사용자가 로그인 후 대시보드에서 '새 민원 알림' 확인\n2. '민원함' 메뉴 클릭하여 인박스 페이지로 이동\n3. 우선순위 높은 티켓을 클릭하여 상세 정보 확인\n4. 우측 슬라이드 패널에서 AI 생성 답변 초안 검토\n5. 답변 내용 수정 및 톤 조정\n6. '발송' 버튼 클릭으로 답변 전송\n7. 시스템이 자동으로 시민에게 알림 발송\n8. 티켓 상태가 '답변 완료'로 자동 변경\n9. 대시보드에서 처리 완료 통계 확인\n\n### **핵심 작업 2: 시민 진행 상황 확인**\n1. 시민이 민원 접수 시 받은 알림의 링크 클릭\n2. 토큰 기반 타임라인 페이지 접근 (로그인 불필요)\n3. 진행 단계별 상태 확인 (접수→배정→진행→완료)\n4. 최신 업데이트 및 답변 내용 확인\n5. 답변 완료 시 만족도 조사 참여 (선택사항)\n\n### **핵심 작업 3: 관리자 설정 및 모니터링**\n1. 관리자가 '설정' 메뉴 접근\n2. '알림 템플릿' 섹션에서 카테고리별 자동 답변 템플릿 관리\n3. 'SLA 규칙' 설정으로 카테고리별 응답 시간 기준 정의\n4. '사용자 및 역할'에서 담당자 권한 및 배정 규칙 설정\n5. 대시보드에서 실시간 KPI 및 SLA 준수율 모니터링\n\n## 3. 네비게이션 구조 (네비게이션 구조)\n\n### **주 네비게이션 (좌측 고정 사이드바)**\n- **대시보드** (홈 아이콘)\n  - 오늘의 KPI 요약\n  - SLA 임박 알림\n- **민원함** (인박스 아이콘)\n  - 전체 티켓 (기본값)\n  - 높은 우선순위 필터\n  - SLA 임박 필터\n  - 내 담당 필터\n- **지식 베이스** (북 아이콘)\n  - 답변 가이드\n  - 템플릿 라이브러리\n- **설정** (기어 아이콘)\n  - 조직 관리\n  - 알림 설정\n\n### **상단 글로벌 바**\n- 로고 (CivicAid)\n- 검색창 (티켓 번호, 시민명, 내용 검색)\n- 알림 벨 아이콘 (실시간 알림)\n- 사용자 프로필 드롭다운\n\n### **우측 슬라이드 패널 (티켓 상세 시)**\n- 티켓 정보 헤더\n- 탭 네비게이션:\n  - AI 답변 초안\n  - 대화 이력\n  - 활동 로그\n\n### **모바일 네비게이션**\n- 햄버거 메뉴로 사이드바 내용 드로어 형태 제공\n- 하단 탭바: 대시보드, 민원함, 알림, 설정\n\n## 4. 페이지 계층 구조 (페이지 계층 구조)\n\n```\n/ (루트 - 깊이 1)\n├── /auth (인증 - 깊이 1)\n│   ├── /auth/login (로그인 - 깊이 2)\n│   ├── /auth/signup (회원가입 - 깊이 2)\n│   └── /auth/reset-password (비밀번호 재설정 - 깊이 2)\n├── /dashboard (대시보드 - 깊이 1)\n│   ├── /dashboard/overview (개요 - 깊이 2)\n│   └── /dashboard/satisfaction (만족도 통계 - 깊이 2)\n├── /inbox (민원함 - 깊이 1)\n│   ├── /inbox/all (전체 티켓 - 깊이 2)\n│   ├── /inbox/high-priority (높은 우선순위 - 깊이 2)\n│   ├── /inbox/sla-approaching (SLA 임박 - 깊이 2)\n│   ├── /inbox/assigned-to-me (내 담당 - 깊이 2)\n│   └── /inbox/ticket/:id (티켓 상세 - 깊이 2)\n├── /knowledge-base (지식베이스 - 깊이 1)\n│   ├── /knowledge-base/categories (카테고리 가이드 - 깊이 2)\n│   ├── /knowledge-base/faq (자주 묻는 질문 - 깊이 2)\n│   └── /knowledge-base/templates (답변 템플릿 - 깊이 2)\n├── /settings (설정 - 깊이 1)\n│   ├── /settings/organization (조직 관리 - 깊이 2)\n│   ├── /settings/users (사용자 관리 - 깊이 2)\n│   ├── /settings/notification-templates (알림 템플릿 - 깊이 2)\n│   ├── /settings/sla-rules (SLA 규칙 - 깊이 2)\n│   └── /settings/profile (개인 설정 - 깊이 2)\n└── /timeline/:token (시민 타임라인 - 깊이 1, 공개)\n```\n\n## 5. 콘텐츠 구성 (콘텐츠 구성)\n\n| 페이지 | 주요 콘텐츠 요소 |\n|---|---|\n| **대시보드** | KPI 카드 (오늘/주간 접수·완료·지연), SLA 임박 리스트, 실시간 통계 차트, 만족도 점수 요약 |\n| **민원함 리스트** | 티켓 테이블 (ID, 제목, 카테고리, 우선순위 배지, 담당자, SLA 상태, 접수일), 필터 바, 검색창 |\n| **티켓 상세 (우측 패널)** | 티켓 헤더 (ID, 상태 배지, SLA 타이머), AI 답변 초안 에디터, 톤 조정 드롭다운, 발송 버튼, 대화 이력 |\n| **시민 타임라인** | 진행 단계 표시기, 최신 업데이트 피드, 답변 내용 표시, 만족도 조사 폼 (답변 완료 시) |\n| **지식베이스** | 카테고리별 가이드 리스트, 검색 기능, 답변 템플릿 라이브러리, 자주 묻는 질문 아코디언 |\n| **설정 - 조직 관리** | 조직 정보 폼, 담당자 배정 규칙 테이블, 카테고리 관리 섹션 |\n| **설정 - 알림 템플릿** | 템플릿 편집기, 변수 삽입 도구, 미리보기 패널, 채널별 설정 (카카오/SMS/이메일) |\n| **설정 - SLA 규칙** | 카테고리별 응답 시간 설정 테이블, 에스컬레이션 규칙, 알림 설정 |\n| **로그인/회원가입** | 인증 폼, 조직 코드 입력, 소셜 로그인 옵션, 비밀번호 재설정 링크 |\n\n## 6. 인터랙션 패턴 (인터랙션 패턴)\n\n### **모달 사용 패턴**\n- **확인 모달**: 중요한 액션 (답변 발송, 티켓 삭제, 설정 변경) 시 사용\n- **정보 모달**: 상세 정보 표시 (만족도 상세 피드백, 활동 로그 전체 보기)\n- **편집 모달**: 빠른 편집 작업 (카테고리 수정, 사용자 권한 변경)\n\n### **툴팁 사용 패턴**\n- **도움말 툴팁**: 복잡한 기능이나 용어 설명\n- **상태 툴팁**: 배지나 아이콘에 마우스 오버 시 상세 정보 제공\n- **단축키 툴팁**: 버튼 호버 시 키보드 단축키 안내\n\n### **실시간 업데이트 패턴**\n- **토스트 알림**: 성공/오류 피드백, 자동 해제 (4초)\n- **배지 업데이트**: 새 민원 접수, SLA 임박 시 실시간 카운터 변경\n- **상태 표시기**: 답변 발송 중, AI 분석 중 등 진행 상황 표시\n\n### **무한 스크롤 패턴**\n- **티켓 리스트**: 페이지네이션 대신 무한 스크롤로 성능 최적화\n- **대화 이력**: 과거 대화 내용을 점진적으로 로드\n\n### **드래그 앤 드롭 패턴**\n- **우선순위 조정**: 티켓 리스트에서 드래그로 우선순위 변경 (관리자 권한)\n- **파일 업로드**: 첨부파일 드래그 앤 드롭 영역\n\n## 7. URL 구조 (URL 구조)\n\n### **일반 원칙**\n- **RESTful 패턴**: `/리소스명` 또는 `/리소스명/:id`\n- **계층적 구조**: 상위-하위 관계를 URL에 반영\n- **한국어 피하기**: 모든 URL은 영문으로 구성\n- **케밥 케이스**: 단어 구분은 하이픈(-) 사용\n\n### **구체적 URL 매핑**\n```\n인증 관련:\n- /auth/login\n- /auth/signup\n- /auth/reset-password\n\n메인 기능:\n- /dashboard (기본 대시보드)\n- /dashboard/overview\n- /dashboard/satisfaction\n\n민원 관리:\n- /inbox (전체 티켓 리스트)\n- /inbox/high-priority\n- /inbox/sla-approaching\n- /inbox/assigned-to-me\n- /inbox/ticket/[ticket-id]\n\n지식 관리:\n- /knowledge-base\n- /knowledge-base/categories/[category-id]\n- /knowledge-base/templates/[template-id]\n\n설정:\n- /settings/organization\n- /settings/users\n- /settings/notification-templates\n- /settings/sla-rules\n- /settings/profile\n\n공개 페이지:\n- /timeline/[secure-token] (시민용)\n```\n\n### **쿼리 파라미터 패턴**\n- 필터링: `?category=housing&priority=high`\n- 검색: `?search=전기안전&sort=created_desc`\n- 페이지네이션: `?page=2&limit=20`\n\n## 8. 컴포넌트 계층 구조 (컴포넌트 계층 구조)\n\n### **글로벌 컴포넌트**\n- **AppLayout**: 전체 레이아웃 래퍼\n  - **Header**: 상단 글로벌 네비게이션\n    - **SearchBar**: 통합 검색\n    - **NotificationBell**: 실시간 알림\n    - **UserMenu**: 사용자 프로필 드롭다운\n  - **Sidebar**: 좌측 네비게이션\n    - **NavItem**: 개별 네비게이션 항목\n    - **NavSection**: 네비게이션 그룹\n  - **MainContent**: 메인 콘텐츠 영역\n  - **SlidePanel**: 우측 슬라이드 패널 (티켓 상세)\n\n### **페이지별 컴포넌트**\n\n#### **대시보드 페이지**\n- **DashboardLayout**\n  - **KPICard**: KPI 지표 카드\n  - **SLAAlertList**: SLA 임박 알림 리스트\n  - **StatChart**: 통계 차트 (Line, Bar)\n  - **SatisfactionSummary**: 만족도 요약\n\n#### **민원함 페이지**\n- **InboxLayout**\n  - **FilterBar**: 필터링 도구모음\n  - **TicketTable**: 티켓 목록 테이블\n    - **TicketRow**: 개별 티켓 행\n    - **PriorityBadge**: 우선순위 배지\n    - **SLATimer**: SLA 남은 시간 표시\n  - **TicketDetail**: 티켓 상세 (슬라이드 패널)\n    - **TicketHeader**: 티켓 정보 헤더\n    - **AIAnswerDraft**: AI 답변 초안 에디터\n    - **ConversationThread**: 대화 이력\n    - **ActivityLog**: 활동 로그\n\n#### **시민 타임라인 페이지**\n- **TimelineLayout**\n  - **ProgressBar**: 진행 단계 표시\n  - **UpdateFeed**: 업데이트 피드\n  - **SatisfactionSurvey**: 만족도 조사 폼\n\n### **공통 UI 컴포넌트**\n- **Button**: 다양한 스타일의 버튼\n- **Input**: 입력 필드 (텍스트, 이메일, 비밀번호)\n- **Select**: 드롭다운 선택\n- **Modal**: 모달 다이얼로그\n- **Toast**: 알림 메시지\n- **Badge**: 상태 배지\n- **Card**: 카드 컨테이너\n- **Table**: 데이터 테이블\n- **Tooltip**: 도움말 툴팁\n- **LoadingSpinner**: 로딩 인디케이터\n- **EmptyState**: 빈 상태 일러스트레이션\n\n### **비즈니스 로직 컴포넌트**\n- **AIAnswerGenerator**: AI 답변 생성 로직\n- **NotificationSender**: 알림 발송 로직\n- **SLACalculator**: SLA 계산 및 모니터링\n- **CategoryClassifier**: 민원 카테고리 자동 분류\n- **SatisfactionTracker**: 만족도 추적 및 분석",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "tdd",
      "content": "\n# TDD Process Guidelines - Cursor Rules\n\n## ⚠️ MANDATORY: Follow these rules for EVERY implementation and modification\n\n**This document defines the REQUIRED process for all code changes. No exceptions without explicit team approval.**\n\n## Core Cycle: Red → Green → Refactor\n\n### 1. RED Phase\n- Write a failing test FIRST\n- Test the simplest scenario\n- Verify test fails for the right reason\n- One test at a time\n\n### 2. GREEN Phase  \n- Write MINIMAL code to pass\n- \"Fake it till you make it\" is OK\n\n- YAGNI principle\n\n### 3. REFACTOR Phase\n- Remove duplication\n- Improve naming\n- Simplify structure\n- Keep tests passing\n\n## Test Quality: FIRST Principles\n- **Fast**: Milliseconds, not seconds\n- **Independent**: No shared state\n- **Repeatable**: Same result every time\n- **Self-validating**: Pass/fail, no manual checks\n- **Timely**: Written just before code\n\n## Test Structure: AAA Pattern\n```\n// Arrange\nSet up test data and dependencies\n\n// Act\nExecute the function/method\n\n// Assert\nVerify expected outcome\n```\n\n## Implementation Flow\n1. **List scenarios** before coding\n2. **Pick one scenario** → Write test\n3. **Run test** → See it fail (Red)\n4. **Implement** → Make it pass (Green)\n5. **Refactor** → Clean up (Still Green)\n6. **Commit** → Small, frequent commits\n7. **Repeat** → Next scenario\n\n## Test Pyramid Strategy\n- **Unit Tests** (70%): Fast, isolated, numerous\n- **Integration Tests** (20%): Module boundaries\n- **Acceptance Tests** (10%): User scenarios\n\n## Outside-In vs Inside-Out\n- **Outside-In**: Start with user-facing test → Mock internals → Implement details\n- **Inside-Out**: Start with core logic → Build outward → Integrate components\n\n## Common Anti-patterns to Avoid\n- Testing implementation details\n- Fragile tests tied to internals  \n- Missing assertions\n- Slow, environment-dependent tests\n- Ignored failing tests\n\n## When Tests Fail\n1. **Identify**: Regression, flaky test, or spec change?\n2. **Isolate**: Narrow down the cause\n3. **Fix**: Code bug or test bug\n4. **Learn**: Add missing test cases\n\n## Team Practices\n- CI/CD integration mandatory\n- No merge without tests\n- Test code = Production code quality\n- Pair programming for complex tests\n- Regular test refactoring\n\n## Pragmatic Exceptions\n- UI/Graphics: Manual + snapshot tests\n- Performance: Benchmark suites\n- Exploratory: Spike then test\n- Legacy: Test on change\n\n## Remember\n- Tests are living documentation\n- Test behavior, not implementation\n- Small steps, fast feedback\n- When in doubt, write a test\n",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-08-27T18:10:05.934Z"
    },
    {
      "type": "git-commit-message",
      "content": "\n# Git Commit Message Rules\n\n## Format Structure\n```\n<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]\n```\n\n## Types (Required)\n- `feat`\n- `fix`\n- `docs`\n- `style`\n- `refactor`\n- `perf`\n- `test`\n- `chore`\n- `ci`\n- `build`\n- `revert`\n\n## Scope (Optional)\n- Component, file, or feature area affected\n- Use kebab-case: `user-auth`, `payment-api`\n- Omit if change affects multiple areas\n\n## Description Rules\n- Use imperative mood\n- No capitalization of first letter\n- No period at end\n- Max 50 characters\n- Be specific and actionable\n\n## Body Guidelines\n- Wrap at 72 characters\n- Explain what and why, not how\n- Separate from description with blank line\n- Use bullet points for multiple changes\n\n## Footer Format\n- `BREAKING CHANGE:` for breaking changes\n- `Closes #123` for issue references\n- `Co-authored-by: Vooster AI (@vooster-ai)`\n\n## Examples\n```\nfeat(auth): add OAuth2 Google login\n\nfix: resolve memory leak in user session cleanup\n\ndocs(api): update authentication endpoints\n\nrefactor(utils): extract validation helpers to separate module\n\nBREAKING CHANGE: remove deprecated getUserData() method\n```\n\n## Workflow Integration\n**ALWAYS write a commit message after completing any development task, feature, or bug fix.**\n\n## Validation Checklist\n- [ ] Type is from approved list\n- [ ] Description under 50 chars\n- [ ] Imperative mood used\n- [ ] No trailing period\n- [ ] Meaningful and clear context\n    ",
      "writedAt": "2025-08-27T18:10:05.934Z"
    }
  ]
}